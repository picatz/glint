# -*- mode: json -*-
# vi: set ft=json :
{
    "rules": [
        {
            "type": "import",
            "comment": "we don't use golang.org/x/* packages",
            "cannot_match": [
                "golang.org/x/\\w+"
            ],
            "must_match": [
                "\\w+"
            ]
        },
        {
            "type": "import",
            "comment": "we don't rely on these packages for almost anything",
            "cannot_match": [
                "crypto/md5",
                "crypto/des",
                "crypto/rc4",
                "math/rand",
                "net/http/cgi",
                "crypto/sha1"
            ]
        },
        {
            "type": "method",
            "comment": "we don't use fmt.Errorf for some silly reaosn",
            "call": "fmt.Errorf",
            "dont_use": true
        },
        {
            "type": "method",
            "comment": "don't use uppercase error message string in fmt.Errorf formatted errors",
            "call": "fmt.Errorf",
            "argument": 0,
            "cannot_match": [
                "^[A-Z]+"
            ]
        },
        {
            "type": "method",
            "comment": "don't use math.Rand as source of entropy",
            "call_match": [
                "rand.New$"
            ],
            "dont_use": true
        },
        {
            "type": "method",
            "comment": "don't use http.Handle/http.HandleFunc which uses the DefaultServeMux due to possible side-effects",
            "cannot_match": [
                "http.Handle$|http.HandleFunc$"
            ]
        },
        {
            "type": "method",
            "comment": "don't use net.Listen to listen on all IPv4 addresses",
            "call": "net.Listen",
            "argument": 1,
            "cannot_match": [
                "^(0.0.0.0|:).*$"
            ]
        },
        {
            "type": "method",
            "comment": "don't use net.Listen to listen on a random port",
            "call": "net.Listen",
            "argument": 1,
            "cannot_match": [
                "^.*:0?$"
            ]
        },
        {
            "type": "import",
            "comment": "don't use the unsafe package",
            "cannot_match": [
                "unsafe"
            ]
        },
        {
            "type": "struct",
            "comment": "don't use old/weak tls cipher suites in your tls.Config",
            "name": "tls.Config",
            "field": "CipherSuites",
            "cannot_match": [
                "tls.TLS_AES_128_GCM_SHA256"
            ]
        },
        {
            "type": "struct",
            "comment": "for most structs, ReadTimeout should almost never be 0",
            "field": "ReadTimeout",
            "cannot_match": [
                "0"
            ]
        },
        {
            "type": "struct",
            "comment": "always set ReadTimeout to something not 0 when creating an http.Server ",
            "name": "http.Server",
            "field": "ReadTimeout",
            "cannot_match": [
                "nil", "0"
            ]
        },
        {
            "type": "method",
            "comment": "overly extensive file permissions detected",
            "call_match": [
                "os.Mkdir", "os.MkdirAll"
            ],
            "argument": 1,
            "greater_than": 750
        },
        {
            "type": "method",
            "comment": "use 2048 bits or more when generating RSA keys for some reason",
            "call": "rsa.GenerateKey",
            "argument": 1,
            "less_than": 2048
         }
    ]
}
